@node External Protocols
@chapter External Protocols

@menu
* Unit Protocol::
* Insertion Stack Protocol::
@end menu

This chapter describes the external protocols provided by the @sysname{} library.

@node Unit Protocol
@section Unit Protocol

@defgena{apply-from-cursor,text.editing} continuation cursor unit direction
Repeatedly call @var{continuation} until the sub-sequence of buffer
items indicated by @var{cursor}, @var{unit} and @var{direction} has been
processed.

@var{continuation} is a function the lambda list of which has to be
compatible with @code{(cursor item)}.  The function will be called for
each item in the indicated sub-sequence with a cursor that is positioned
before or after the item as the first argument and the item as the
second argument.  @var{cursor} is positioned before @var{item} if
@var{direction} is @t{:forward} and after @var{item} if @var{direction}
is @t{:backward}.

@var{unit} is the unit in or at or around @var{cursor} that
@var{continuation} should be applied to.  Examples of units are
@ref{unit-item,item}, @ref{unit-line,line}, @ref{unit-word,word} and
@ref{unit-paragraph,paragraph}.

@var{direction} is the direction in which the processing should be
performed from or around @var{cursor}.  Possible values are @t{:forward}
and @t{:backward}.
@end deffn

@defgena{item-transformer,text.editing} transform direction
Return a function that transforms items via @var{transform} when passed
to @ref{Generic-Function text.editing|apply-from-cursor, apply-from-cursor}.

@var{transform} is a function that accepts an item as its sole argument
and returns an item (either the item passed to it or a new item).

@var{direction} specifies the direction for which the returned function
will be valid.  In other words, when the returned function is passed to
@ref{Generic-Function text.editing|apply-from-cursor, apply-from-cursor},
that call has to use the same value for the @var{direction} argument as
the call to this function.
@end deffn

@node Insertion Stack Protocol
@section Insertion Stack Protocol

@cindex insertion stack

This protocol allows querying and manipulating the entries of an
insertion stack.  This protocol is not concerned with buffers, sites or
cursors.

@defclassa{insertion-stack-empty,text.editing}
This error is signaled when an attempt is made to retrieve an entry from
an empty insertion stack.
@end deftp

@defgena{forward,text.editing} insertion-entry
Return the sequence of items that have been added to
@var{insertion-entry} by forward deletion operations such as
@t{cluffer:delete-item} and @t{cluffer:join-line}.
@end deffn

@defgena{(setf forward),text.editing} new-value insertion-entry
Set the sequence of items for forward deletion operations of
@var{insertion-entry} to @var{new-value}.
@end deffn

@defgena{backward,text.editing} insertion-entry
Return the sequence of items that have been added to
@var{insertion-entry} by backward deletion operations such as
@t{cluffer:erase-item}.
@end deffn

@defgena{(setf backward),text.editing} new-value insertion-entry
Set the sequence of items for backward deletion operations of
@var{insertion-entry} to @var{new-value}.
@end deffn

@defgena{insertion,text.editing} insertion-entry
Return a sequence of items that should be inserted into a buffer to
conceptually insert @var{insertion-entry} into that buffer.

The returned sequence is the concatenation of the items of the
``forward'' and ``backward'' sequences of @var{insertion-entry} in the
appropriate order.
@end deffn

@defgena{entry-count,text.editing} insertion-stack
Return number of insertion entries in @var{insertion-stack}.
@end deffn

@defgena{top-entry,text.editing} insertion-stack
Return the top entry in @var{insertion-stack} or @t{nil}.

The @t{forward}, @t{backward} and @t{insertion} functions can be applied
to the returned object.
@end deffn

@defgena{find-entry,text.editing} index insertion-stack
Return the entry at @var{index} in @var{insertion-stack}.

The @t{forward}, @t{backward} and @t{insertion} functions can be applied
to the returned object.
@end deffn

@defgena{push-entry,text.editing} insertion-stack
Add a new entry to @var{insertion-stack} and return the new entry.
@end deffn

@defgena{pop-entry,text.editing} insertion-stack
Remove the top entry from @var{insertion-stack} and return the removed
entry.

If @var{insertion-stack} is empty, signal an error of type
@t{insertion-stack-empty-error}.
@end deffn
