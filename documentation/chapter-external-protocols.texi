@node External Protocols
@chapter External Protocols

@menu
* Detach Protocol::
* Unit Protocol::
* Insertion Stack Protocol::
* Preferred Column Protocol::
* Operation History Protocol::
* Site Protocol::
* Buffer Protocol::
* Multiple Sites Protocol::
* Operation Protocol::
@end menu

This chapter describes the external protocols provided by the @sysname{} library.

@node Detach Protocol
@section Detach Protocol

@defgena{detach,text.editing} (object)
Detach @var{object} from any buffer or line it is currently attached to.
@end deffn

@node Unit Protocol
@section Unit Protocol

@defgena{apply-from-cursor,text.editing} continuation cursor unit direction
Repeatedly call @var{continuation} until the sub-sequence of buffer
items indicated by @var{cursor}, @var{unit} and @var{direction} has been
processed.

@var{continuation} is a function the lambda list of which has to be
compatible with @code{(cursor item)}.  The function will be called for
each item in the indicated sub-sequence with a cursor that is positioned
before or after the item as the first argument and the item as the
second argument.  @var{cursor} is positioned before @var{item} if
@var{direction} is @t{:forward} and after @var{item} if @var{direction}
is @t{:backward}.

@var{unit} is the unit in or at or around @var{cursor} that
@var{continuation} should be applied to.  Examples of units are
@ref{unit-item,item}, @ref{unit-line,line}, @ref{unit-word,word} and
@ref{unit-paragraph,paragraph}.

@var{direction} is the direction in which the processing should be
performed from or around @var{cursor}.  Possible values are @t{:forward}
and @t{:backward}.
@end deffn

@defgena{item-transformer,text.editing} transform direction
Return a function that transforms items via @var{transform} when passed
to @ref{Generic-Function text.editing|apply-from-cursor, apply-from-cursor}.

@var{transform} is a function that accepts an item as its sole argument
and returns an item (either the item passed to it or a new item).

@var{direction} specifies the direction for which the returned function
will be valid.  In other words, when the returned function is passed to
@ref{Generic-Function text.editing|apply-from-cursor, apply-from-cursor},
that call has to use the same value for the @var{direction} argument as
the call to this function.
@end deffn

@node Insertion Stack Protocol
@section Insertion Stack Protocol

@cindex insertion stack

This protocol allows querying and manipulating the entries of an
insertion stack.  This protocol is not concerned with buffers, sites or
cursors.

@defclassa{insertion-stack-empty,text.editing}
This error is signaled when an attempt is made to retrieve an entry from
an empty insertion stack.
@end deftp

@defgena{forward,text.editing} insertion-entry
Return the sequence of items that have been added to
@var{insertion-entry} by forward deletion operations such as
@t{cluffer:delete-item} and @t{cluffer:join-line}.
@end deffn

@defgena{(setf forward),text.editing} new-value insertion-entry
Set the sequence of items for forward deletion operations of
@var{insertion-entry} to @var{new-value}.
@end deffn

@defgena{backward,text.editing} insertion-entry
Return the sequence of items that have been added to
@var{insertion-entry} by backward deletion operations such as
@t{cluffer:erase-item}.
@end deffn

@defgena{(setf backward),text.editing} new-value insertion-entry
Set the sequence of items for backward deletion operations of
@var{insertion-entry} to @var{new-value}.
@end deffn

@defgena{insertion,text.editing} insertion-entry
Return a sequence of items that should be inserted into a buffer to
conceptually insert @var{insertion-entry} into that buffer.

The returned sequence is the concatenation of the items of the
``forward'' and ``backward'' sequences of @var{insertion-entry} in the
appropriate order.
@end deffn

@defgena{entry-count,text.editing} insertion-stack
Return number of insertion entries in @var{insertion-stack}.
@end deffn

@defgena{top-entry,text.editing} insertion-stack
Return the top entry in @var{insertion-stack} or @t{nil}.

The @t{forward}, @t{backward} and @t{insertion} functions can be applied
to the returned object.
@end deffn

@defgena{find-entry,text.editing} index insertion-stack
Return the entry at @var{index} in @var{insertion-stack}.

The @t{forward}, @t{backward} and @t{insertion} functions can be applied
to the returned object.
@end deffn

@defgena{push-entry,text.editing} insertion-stack
Add a new entry to @var{insertion-stack} and return the new entry.
@end deffn

@defgena{pop-entry,text.editing} insertion-stack
Remove the top entry from @var{insertion-stack} and return the removed
entry.

If @var{insertion-stack} is empty, signal an error of type
@t{insertion-stack-empty-error}.
@end deffn

@node Preferred Column Protocol
@section Preferred Column Protocol

The purpose of this protocol is tracking in which column the point
cursor of a site should be placed when the cursor repeatedly moves
vertically (between lines) without other movement or operations.

@defgena{preferred-column,text.editing} site
Return the column number in which the point of @var{site} should reside
by default.

The point cursor should be placed in that column or the closest
existing column of the current line when the point cursor moves
between lines without moving within any line.
@end deffn

@defgena{(setf preferred-column,text.editing)} new-value site
Set the column number in which the point of @var{site} should reside by
default to @var{new-value}.
@end deffn

@node Operation History Protocol
@section Operation History Protocol

@defgena{most-recent-operation,text.editing} site
Return the most recent operation of @var{site} or @t{nil}.
@end deffn

@defgena{push-operation,text.editing} operation site
Push @var{operation} into the operation history of @var{site}.
@end deffn

@node Site Protocol
@section Site Protocol

@cindex site

The site protocol extends the @ref{Detach Protocol}, that is, sites can
be detached.

@defgena{point,text.editing} site
Return the point cursor of @var{site}.

The returned object is a Cluffer cursor
@end deffn

@defgena{mark,text.editing} site
Return the mark cursor of @var{site}.

The returned object is a Cluffer cursor.
@end deffn

@defgena{mark-active-p,text.editing} site
Indicate whether the mark cursor of @var{site} is active.
@end deffn

@defgena{(setf mark-active-p),text.editing} new-value site
Change whether the mark cursor of @var{site} is active.

@var{new-value} is a generalized Boolean.
@end deffn

@defgena{mark-stack,text.editing} site
Return the mark stack of @var{site}.
@end deffn

@defgena{insertion-stack,text.editing} site
Return the insertion stack of @var{site}.

The returned object implements the @ref{Insertion Stack Protocol}.
@end deffn

@node Buffer Protocol
@section Buffer Protocol

@defgena{site,text.editing} buffer
Return the primary site of @var{buffer}.
@end deffn

The generic functions @ref{Generic-Function text.editing|point,point}
and @ref{Generic-Function text.editing|mark,mark} defined in the
@ref{Site Protocol} work on buffers as well.  The return value is the
primary point cursor and the primary mark cursor respectively.

@node Multiple Sites Protocol
@section Multiple Sites Protocol

@defgena{site-count,text.editing} buffer
Return the total number of sites that are attached to @var{buffer}.

The returned count includes the primary site.
@end deffn

@defgena{map-sites,text.editing} function buffer
Call @var{function} with each site that is attached to @var{buffer}.
@end deffn

@defgena{sites,text.editing} buffer
Return the sequence of all sites which are attached to @var{buffer}.
@end deffn

@defgena{add-site,text.editing} site buffer
Add @var{site} to the sites of @var{buffer}.

Return @var{site}.

If the point cursor or the mark cursor of @var{site} is associated with
a buffer other than @var{bar}, an error is signaled.

If @var{site} is already one of the sites that are attached to
@var{buffer}, signal an error.
@end deffn

@defgena{remove-site,text.editing} site buffer
Remove @var{site} fro the sites of @var{buffer}.

Return @var{site}.

If @var{site} is not one of the sites that are attached to @var{buffer},
signal an error.

If @var{site} is the primary site of @var{buffer}, signal an error.
@end deffn

@defgena{push-site-at,text.editing} buffer line position
Create a new site at @var{line} and @var{position} and attached it to
@var{buffer}.

@var{line} and @var{position} control the location of the point cursor
of the new site.

Return the new site.
@end deffn

@defgena{push-site-relative,text.editing} buffer unit direction
Create a new site relative to the primary site and attached it to
@var{buffer}.

@var{unit} and @var{direction} control the location of the point cursor
of the new site.  The new point cursor starts at the location of the
primary point cursor, then moves according to @var{unit} and
@var{direction}.

Return the new site.

The attempt to move the new point cursor the specified location may
result in an error.  In that case, the new site is not attached and the
error is signaled.
@end deffn

@defgena{pop-site,text.editing} buffer
Remove the most recently added site from @var{buffer}.

Return the removed site.

If no sites beside the primary site are attached to @var{buffer},
signal an error of type @t{singular-site-error}.
@end deffn

@defgena{rotate-sites,text.editing} buffer direction
Swap roles between the primary site and secondary sites.

@var{direction} controls the direction of the rotation.

TODO explain this properly

TODO @var{direction} is ignored at the moment

If no sites beside the primary site are attached to @var{buffer},
signal an error of type @t{singular-site-error}.
@end deffn

@defgena{other-sites,text.editing} buffer
Return the sequence of all sites which are attached to @var{buffer}
except the primary site.
@end deffn

@defgena{remote-other-sites,text.editing} buffer
Remove all sites from @var{buffer} except the primary site.
@end deffn

@node Operation Protocol
@section Operation Protocol

@defgena{perform,text.editing} target operation @rest{} operation-arguments
Perform @var{operation} with @var{operation-arguments} in or on @var{target}.

@var{target} is the object in or at or on which the operation should be
performed such as a buffer or a cursor.

@var{operation} designates a function which performs the desired
operation when called with a target object (not necessarily
@var{target}) as the first argument.  The target object in the call to
@var{operation} may be different from @var{target} when methods on this
generic function translate an operation on one target object to one or
more operations on other target objects.  For example, an operation on a
buffer is commonly translated to one operation on each
@ref{term-site,site} of the buffer and further to one operation on the
point cursor of each site of the buffer.

@var{operation-arguments} is a list of additional arguments that should
be passed to the function designated by @var{operation}.

This function generally returns the values returned by the
@var{operation} call.  Similarly, calls to this function may signal any
condition that may be signaled by the @var{operation} call.  However, if
@var{target} is a buffer and multiple sites exist, a different
convention may be used in order to return one result for each site or
bundle conditions for multiple sites in a single condition.
@end deffn
