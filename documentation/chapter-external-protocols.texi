@node External Protocols
@chapter External Protocols

@menu
* Detach Protocol::
* Unit Protocol::
* Insertion Stack Protocol::
* Preferred Column Protocol::
* Operation History Protocol::
* Site Protocols::
* Buffer Protocols::
* Operation Protocol::
* Movement and Editing Protocol::
@end menu

This chapter describes the external protocols provided by the @sysname{} library.

@node Detach Protocol
@section Detach Protocol

This protocol is used to sever connections between @ref{term-site,sites}
(and associated objects) and buffers when those objects should no longer
be associated with the respective buffer.

@defgena{detach,text.editing} (object)
Detach @var{object} from any buffer or line it is currently attached to.
@end deffn

@node Unit Protocol
@section Unit Protocol

@deffuna{all-units,text.editing}
Return a sequence of all defined units.
@end deffn

@defgena{apply-from-cursor,text.editing} continuation cursor unit direction
Repeatedly call @var{continuation} until the sub-sequence of buffer
items indicated by @var{cursor}, @var{unit} and @var{direction} has been
processed.

@var{continuation} is a function the lambda list of which has to be
compatible with @code{(cursor item)}.  The function will be called for
each item in the indicated sub-sequence with a cursor that is positioned
before or after the item as the first argument and the item as the
second argument.  @var{cursor} is positioned before @var{item} if
@var{direction} is @t{:forward} and after @var{item} if @var{direction}
is @t{:backward}.

@var{unit} is the unit in or at or around @var{cursor} that
@var{continuation} should be applied to.  Examples of units are
@ref{unit-item,item}, @ref{unit-line,line}, @ref{unit-word,word} and
@ref{unit-paragraph,paragraph}.

@var{direction} is the direction in which the processing should be
performed from or around @var{cursor}.  Possible values are @t{:forward}
and @t{:backward}.
@end deffn

@defgena{item-transformer,text.editing} transform direction
Return a function that transforms items via @var{transform} when passed
to @ref{Generic-Function text.editing|apply-from-cursor, apply-from-cursor}.

@var{transform} is a function that accepts an item as its sole argument
and returns an item (either the item passed to it or a new item).

@var{direction} specifies the direction for which the returned function
will be valid.  In other words, when the returned function is passed to
@ref{Generic-Function text.editing|apply-from-cursor, apply-from-cursor},
that call has to use the same value for the @var{direction} argument as
the call to this function.
@end deffn

@node Site Protocols
@section Site Protocols

This section describes protocols related to @ref{term-site,sites} and
mixin classes that provide default implementations of those protocols.

@menu
* Insertion Stack Protocol::
* Preferred Column Protocol::
* Operation History Protocol::
* Site Protocol::
@end menu

@node Insertion Stack Protocol
@subsection Insertion Stack Protocol

@cindex insertion stack

This protocol allows querying and manipulating the entries of an
insertion stack.  This protocol is not concerned with buffers, sites or
cursors.  See @ref{Copy and Yank Operations} for a higher-level protocol
on top of this one.

@defclassa{insertion-stack-empty-error,text.editing}
This error is signaled when an attempt is made to retrieve an entry from
an empty insertion stack.
@end deftp

@defgena{forward,text.editing} insertion-entry
Return the sequence of items that have been added to
@var{insertion-entry} by forward deletion operations such as
@t{cluffer:delete-item} and @t{cluffer:join-line}.
@end deffn

@defgena{(setf forward),text.editing} new-value insertion-entry
Set the sequence of items for forward deletion operations of
@var{insertion-entry} to @var{new-value}.
@end deffn

@defgena{backward,text.editing} insertion-entry
Return the sequence of items that have been added to
@var{insertion-entry} by backward deletion operations such as
@t{cluffer:erase-item}.
@end deffn

@defgena{(setf backward),text.editing} new-value insertion-entry
Set the sequence of items for backward deletion operations of
@var{insertion-entry} to @var{new-value}.
@end deffn

@defgena{insertion,text.editing} insertion-entry
Return a sequence of items that should be inserted into a buffer to
conceptually insert @var{insertion-entry} into that buffer.

The returned sequence is the concatenation of the items of the
``forward'' and ``backward'' sequences of @var{insertion-entry} in the
appropriate order.
@end deffn

@defgena{entry-count,text.editing} insertion-stack
Return number of insertion entries in @var{insertion-stack}.
@end deffn

@defgena{top-entry,text.editing} insertion-stack
Return the top entry in @var{insertion-stack} or @t{nil}.

The @t{forward}, @t{backward} and @t{insertion} functions can be applied
to the returned object.
@end deffn

@defgena{find-entry,text.editing} index insertion-stack
Return the entry at @var{index} in @var{insertion-stack}.

The @t{forward}, @t{backward} and @t{insertion} functions can be applied
to the returned object.
@end deffn

@defgena{push-entry,text.editing} insertion-stack
Add a new entry to @var{insertion-stack} and return the new entry.
@end deffn

@defgena{pop-entry,text.editing} insertion-stack
Remove the top entry from @var{insertion-stack} and return the removed
entry.

If @var{insertion-stack} is empty, signal an error of type
@ref{Class text.editing|insertion-stack-empty-error,insertion-stack-empty-error}.
@end deffn

@node Preferred Column Protocol
@subsection Preferred Column Protocol

The purpose of this protocol is tracking in which column the
@ref{term-point,point} cursor of a site should be placed when the cursor
repeatedly moves vertically (between lines) without other movement or
operations.

@defgena{preferred-column,text.editing} site
Return the column number in which the point of @var{site} should reside
by default or @t{nil}.

The point cursor should be placed in that column or the rightmost
existing column of the current line when the point cursor moves between
lines without moving within any line.
@end deffn

@defgena{(setf preferred-column,text.editing)} new-value site
Set the column number in which the point of @var{site} should reside by
default to @var{new-value}.
@end deffn

A default implementation of this protocol is provided by the following
mixin class:

@defclassa{preferred-column-tracking-mixin,text.editing}
This class is intended to be mixed into site classes that track
preferred column of the point cursor.
@end deftp

@node Operation History Protocol
@subsection Operation History Protocol

The purpose of this protocol is recording the sequence of operations
that have been applied to a given @ref{term-site,site}.  This allows the
command processor or certain operations, for example, to take into
account the previous operation. Examples:

@itemize

@item
Some operations behave differently when repeated such as setting the
@ref{term-mark,mark} twice to first set the mark then deactivate it.

@item
The command processor may track runs of deletion operations to collect
the deleted items into a single
@ref{term-insertion-stack,insertion stack} entry.

@item
The command processor may track runs of insertion, deletion or
modification operations to create undo groups from multiple primitive
operations.

@end itemize

@defgena{most-recent-operation,text.editing} site
Return the most recent operation of @var{site} or @t{nil}.
@end deffn

@defgena{push-operation,text.editing} operation site
Push @var{operation} into the operation history of @var{site}.

@var{operation} should be a list of the form
@code{(@var{operation-name} . @var{arguments})}
where @var{operation-name} is a symbol that names an operation function.
@end deffn

A default implementation of this protocol is provided by the following
mixin class:

@defclassa{operation-history-mixin,text.editing}
This class is intended to be mixed into site classes that track the
history of performed operations.
@end deftp

@node Site Protocol
@subsection Site Protocol

@cindex site

The site protocol extends the @ref{Detach Protocol}, that is, sites can
be detached.

@defgena{point,text.editing} site
Return the point cursor of @var{site}.

The returned object is a Cluffer cursor
@end deffn

@defgena{mark,text.editing} site
Return the mark cursor of @var{site}.

The returned object is a Cluffer cursor.
@end deffn

@defgena{mark-active-p,text.editing} site
Indicate whether the mark cursor of @var{site} is active.
@end deffn

@defgena{(setf mark-active-p),text.editing} new-value site
Change whether the mark cursor of @var{site} is active.

@var{new-value} is a generalized Boolean.
@end deffn

@defgena{mark-stack,text.editing} site
Return the mark stack of @var{site}.
@end deffn

@defgena{insertion-stack,text.editing} site
Return the insertion stack of @var{site}.

The returned object implements the @ref{Insertion Stack Protocol}.
@end deffn

@node Buffer Protocols
@section Buffer Protocols

This section describes protocols for buffers and mixin classes which
provide default implementations of the protocols.  The described
protocols are extensions of the Cluffer protocols for buffers in the
sense that objects which are used with the protocols described here must
also implement the Cluffer protocols.  Similarly, the mixin classes are
intended to be mixed into classes that are also subclasses of the buffer
classes provided by Cluffer.

@menu
* Primary Site Protocol::
* Multiple Sites Protocol::
@end menu

@node Primary Site Protocol
@subsection Primary Site Protocol

@cindex primary site

@defgena{site,text.editing} buffer
Return the @ref{term-primary-site,primary site} of @var{buffer}.
@end deffn

The generic functions @ref{Generic-Function text.editing|point,point}
and @ref{Generic-Function text.editing|mark,mark} defined in the
@ref{Site Protocol} work on buffers as well.  The return value is the
primary point cursor and the primary mark cursor respectively.

@node Multiple Sites Protocol
@subsection Multiple Sites Protocol

The following condition types are used in the multiple sites protocol:

@defclassa{singular-site-error,@toppackage{}}
This error is signaled if an operation that requires multiple
@ref{term-site,sites} is performed on a buffer that contains only a
single site.
@end deftp

An implementation of this protocol is provided by the class

@defclassa{multiple-site-mixin,@toppackage{}}
This class is intended to be mixed into buffer classes that can contain
zero or more secondary @ref{term-site,sites} in addition to the primary
site.
@end deftp

The protocol consists of the following generic functions:

@defgena{site-count,@toppackage{}} buffer
Return the total number of sites that are attached to @var{buffer}.

The returned count includes the primary site.
@end deffn

@defgena{map-sites,@toppackage{}} function buffer
Call @var{function} with each site that is attached to @var{buffer}.
@end deffn

@defgena{sites,@toppackage{}} buffer
Return the sequence of all sites which are attached to @var{buffer}.
@end deffn

@defgena{add-site,@toppackage{}} site buffer
Add @var{site} to the sites of @var{buffer}.

Return @var{site}.

If the point cursor or the mark cursor of @var{site} is associated with
a buffer other than @var{bar}, an error is signaled.

If @var{site} is already one of the sites that are attached to
@var{buffer}, signal an error.
@end deffn

@defgena{remove-site,@toppackage{}} site buffer
@ref{Generic-Function @toppackage{}|detach,Detach} @var{site} and remove
it from the sites of @var{buffer}.

Return @var{site}.

If @var{site} is not one of the sites that are attached to @var{buffer},
signal an error.

If @var{site} is the primary site of @var{buffer}, signal an error.
@end deffn

@defgena{push-site-at,@toppackage{}} buffer line position
Create a new site at @var{line} and @var{position} and attach it to
@var{buffer}.

@var{line} and @var{position} control the location of the point cursor
of the new site.

Return the new site.
@end deffn

@defgena{push-site-relative,@toppackage{}} buffer unit direction
Create a new site relative to the primary site and attach it to
@var{buffer}.

@var{unit} and @var{direction} control the location of the point cursor
of the new site.  The new point cursor starts at the location of the
primary point cursor, then moves according to @var{unit} and
@var{direction}.

Return the new site.

The attempt to move the new point cursor the specified location may
result in an error.  In that case, the new site is not attached and the
error is signaled.
@end deffn

@defgena{pop-site,text.editing} buffer
Remove the most recently added @ref{term-site,site} from @var{buffer}.

Return the removed site.

If no sites beside the primary site are attached to @var{buffer},
signal an error of type
@ref{Class @toppackage{}|singular-site-error,singular-site-error}.
@end deffn

@defgena{rotate-sites,text.editing} buffer direction
Swap roles between the primary @ref{term-site,site} and secondary sites
in @var{buffer}.

@var{direction} controls the direction of the rotation.

If @var{direction} is @t{:forward}, sites are rotated as follows:

@example
primary          @U{2190} first secondary
first secondary  @U{2190} second secondary
second secondary @U{2190} third secondary
@dots{}
last secondary   @U{2190} primary
@end example

@var{direction} @t{:backward} is not supported at the moment

If no sites beside the primary site are attached to @var{buffer},
signal an error of type
@ref{Class @toppackage{}|singular-site-error,singular-site-error}.
@end deffn

@defgena{other-sites,@toppackage{}} buffer
Return the sequence of all sites which are attached to @var{buffer}
except the primary site.
@end deffn

@defgena{remove-other-sites,@toppackage{}} buffer
Remove all sites from @var{buffer} except the primary site.
@end deffn

@node Operation Protocol
@section Operation Protocol

@defgena{perform,@toppackage{}} target operation @rest{} operation-arguments
Perform @var{operation} with @var{operation-arguments} in or on
@var{target}.

@var{target} is the object in or at or on which the operation should be
performed such as a buffer or a cursor.

@var{operation} designates a function which performs the desired
operation when called with a target object (not necessarily
@var{target}) as the first argument.  The target object in the call to
@var{operation} may be different from @var{target} when methods on this
generic function translate an operation on one target object to one or
more operations on other target objects.  For example, an operation on a
buffer is commonly translated to one operation on each
@ref{term-site,site} of the buffer and further to one operation on the
point cursor of each site of the buffer.

@var{operation-arguments} is a list of additional arguments that should
be passed to the function designated by @var{operation}.

This function generally returns the values returned by the
@var{operation} call.  Similarly, calls to this function may signal any
condition that may be signaled by the @var{operation} call.  However, if
@var{target} is a buffer and multiple sites exist, a different
convention may be used in order to return one result for each site or
bundle conditions for multiple sites in a single condition
(@pxref{Multiple Sites Protocol}).
@end deffn

@node Movement and Editing Protocol
@section Movement and Editing Protocol

@menu
* Motion Operations::
* Insertion Operations::
* Deletion Operations::
* Items Functions::
* Marking Operations::
* Copy and Yank Operations::
* Case Changing Operations::
* Transposing Operations::
* Filling Operations::
* Commenting Operations::
* Operations on Delimiter Pairs::
@end menu

@quotation note
The operations described in this section can be invoked by calling the
respective generic function.  However, a more flexible way which, for
example, handles multiple sites correctly is the @ref{Operation
Protocol}.  The following code invokes an operation @var{operation} via
that protocol
@lisp
(text.editing:perform @var{buffer} '@var{operation} @var{unit} @var{direction} @var{other-arguments})
@end lisp
@end quotation

@node Motion Operations
@subsection Motion Operations

@defgena{move,text.editing} cursor unit direction
Move @var{cursor} to the beginning or end of the sub-sequence of buffer
items indicated by @var{unit}.

@var{cursor} is an attached Cluffer cursor.

@var{unit} is a unit of movement such as @ref{unit-item,item} or
@ref{unit-word,word}.

If @var{direction} is @t{:forward}, @var{cursor} moves to the end of the
sub-sequence. If @var{direction} is @t{:backward}, @var{cursor} moves to
the beginning of the sub-sequence.
@end deffn

@defgena{back-to-indentation,text.editing} cursor
Move @var{cursor} to the first column of the current line that contains
a non-whitespace item.
@end deffn

@node Insertion Operations
@subsection Insertion Operations

@defgena{insert-item,text.editing} cursor item
Insert @var{item} at @var{cursor}.
@end deffn

@defgena{insert-newline,text.editing} cursor
Split the current line at the position of @var{cursor}.
@end deffn

@defgena{insert-items,text.editing} cursor items &key start end
Insert the items in @var{items} at @var{cursor}.

@var{start} and @var{end}, when supplied, select a sub-sequence of
@var{items}.
@end deffn

@node Deletion Operations
@subsection Deletion Operations

@defgena{delete,text.editing} cursor unit direction
Delete the sub-sequence of buffer items indicated by @var{cursor},
@var{unit} and @var{direction}.

@var{cursor} is an attached Cluffer cursor.

@var{unit} is a unit of movement such as @ref{unit-item,item}
or @ref{unit-word,word}.

@var{direction} is either @t{:forward} or @t{:backward}.
@end deffn

@defgena{delete-indentation,text.editing} cursor
Join previous and current line, delete whitespace before and after
@var{cursor}.

Keep a single space character unless the delete placed @var{cursor} on
an empty line.
@end deffn

@defgena{delete-trailing-whitespace,text.editing} cursor
Delete trailing whitespace from buffer lines.

@var{cursor} determines the first line to be processed.  All subsequent
lines to the end of the buffer are processed after that.
@end deffn

@defgena{fixup-whitespace,text.editing} cursor
Delete consecutive whitespace before and after @var{cursor} in the
current line.

Keep a single space character unless the deletion placed @var{cursor} at
the beginning of the line.
@end deffn

@node Items Functions
@subsection Items Functions

The following convenience function allow easy retrieval and mutation of
sub-sequences of buffer items:

@defgena{map-items,text.editing} function cursor unit direction
Call @var{function} with each item in the sub-sequence of buffer items
indicated by @var{cursor}, @var{unit} and @var{direction}.
@end deffn

@defgena{items,text.editing} cursor unit direction
Return a @t{cl:sequence} containing the sub-sequence of buffer items
indicated by @var{cursor}, @var{unit} and @var{direction}.
@end deffn

@defgena{(setf items),text.editing} new-value cursor unit direction
Replace the sub-sequence of buffer items indicated by @var{cursor},
@var{unit} and @var{direction} by the items in the @t{cl:sequence}
@var{new-value}.
@end deffn

@node Marking Operations
@subsection Marking Operations

The mark protocol contains operations for managing different aspects of
the @ref{term-mark,mark} cursor of a @ref{term-site,site}:

@itemize
@item
The mark cursor can be set or not.

@item
A set mark cursor can be active or inactive.  When the mark is active,
the point cursor and mark cursor define the @ref{term-region,region} of
the site.

@item
A mark stack stores previous locations of the mark cursor.
@end itemize

@defgena{mark-or-error,text.editing} object
Return the mark cursor of @var{object} or signal an error.

If the mark cursor of @var{object} is not set, signal an error of type
@t{mark-not-set-error}.
@end deffn

@defgena{activate-mark,text.editing} site
Set the state of the mark cursor of @var{site} to active.

Signal an error of type @t{mark-not-set-error} if the mark of @var{site}
is not set.
@end deffn

@defgena{deactivate-mark,text.editing} site
Set the state of the mark cursor of @var{site} to inactive.
@end deffn

@defgena{set-mark,text.editing} site
Set the mark cursor of @var{site} to the position of the point cursor.

Push the current mark cursor, if any, onto the mark stack, set a new
mark cursor and move it to the position of the point cursor. Activate
the mark.

Return the new mark cursor.
@end deffn

@defgena{set-mark-or-toggle-active,text.editing} site
Set the mark cursor of @var{site} or toggle its active state.

If the previous command was not @command{set-mark-or-toggle-active},
then push the current mark cursor of @var{site} onto the mark stack, set
a new mark cursor and move it to the position of the point cursor.

If the previous command was @command{set-mark-or-toggle-active}, then
toggle the active state of the mark cursor of @var{site}.

Return two values: a Boolean which indicates whether a new mark cursor
was set and another Boolean which indicates whether the mark is active.
@end deffn

@defgena{pop-mark,text.editing} site
Pop a mark off the mark stack of @var{site} and move the point cursor
to it.

Destroy the current mark of @var{site}, if any.

Return the popped mark cursor.

Signal an error of type @t{mark-stack-empty} if the mark stack of
@var{site} is empty.
@end deffn

@defgena{exchange-point-and-mark,text.editing} site
Exchange the locations of point and mark of @var{site}.

Signal an error of type @t{mark-not-set-error} if the mark of @var{site}
is not set.
@end deffn

@defgena{mark-object,text.editing} site unit direction
Set region of @var{site} according to @var{unit} and @var{direction}.

Leave the point cursor of @var{site} at its current location.  Ensure
the mark is set and active (see below) and move the mark cursor
according to @var{unit} and @var{direction}.

If the mark of @var{site} is not set, set a new mark cursor at the
location of the point cursor and activate it.  Then apply the motion
according to @var{unit} and @var{direction}.

If the mark of @var{site} is set but not active, activate the mark
cursor and move it to the location of the point cursor.  Then apply the
motion according to @var{unit} and @var{direction}.

If the mark of @var{site} is set and active, just apply the motion
according to @var{unit} and @var{direction}.  This last case allows
extending the region by marking subsequent objects.
@end deffn

@node Copy and Yank Operations
@subsection Copy and Yank Operations

The copy and yank protocol offers higher-level functions that implement
typical copy and yank operations which abstract from the details of the
lower-level @ref{Insertion Stack Protocol}.

@defgena{yank,text.editing} site direction @pkey{} pop
Insert top insertion stack entry of @var{site} at the point of
@var{site}.

Insert the items from the top entry of the insertion stack of @var{site}
before or after the point cursor of @var{site}.

@var{direction} controls whether the items are inserted before or after
the point cursor, or equivalently, whether the point cursor moves to the
beginning or end of the inserted items after the insertion.

@var{pop} controls whether the top entry of the insertion stack should
be popped off.
@end deffn

@defgena{copy,text.editing} site unit direction
Copy items according at @var{site} according to @var{unit} and
@var{direction}.

The items indicated by the point cursor of @var{site}, @var{unit} and
@var{direction} are copied into either the current top entry of the
insertion stack of @var{site} or a new entry that is first pushed onto
the insertion stack.

Whether a new entry should be created is decided according to an
internal protocol that may be exported at some later time.
@end deffn

@node Case Changing Operations
@subsection Case Changing Operations

@defgena{change-case,text.editing} cursor unit direction case
Change the case of the sub-sequence of buffer items indicated by
@var{cursor}, @var{unit} and @var{direction} according to @var{case}.

@var{cursor} is an attached Cluffer cursor.

@var{unit} is a unit of movement such as @ref{unit-item,item},
@ref{unit-word,word}, or @t{expression}.

@var{direction} is either @t{:forward} or @t{:backward}.

@var{case} has to be one of @t{:down}, @t{:up} or @t{:capital}.

The case of an item is changed by calling @t{cl:char-downcase} if
@var{case} is @t{:down}, @t{cl:char-upcase} if @var{case} is @t{:up} and
in a fashion analogous to @t{cl:string-capitalize} if @var{case} is
@t{capital}.
@end deffn

@node Transposing Operations
@subsection Transposing Operations

@defgena{transpose,text.editing} cursor unit direction
Exchange the sequences of items defined by @var{unit} before and after
@var{cursor}.

If @var{cursor} is within a @var{unit}, it is first moved to the
boundary of that @var{unit} according to @var{direction}.

@var{direction} is either @t{:forward} or @t{:backward} and controls
where @var{cursor} is positioned after the operation.
@end deffn

@node Filling Operations
@subsection Filling Operations

@defgena{insert-words-fill,text.editing} cursor words @pkey{} @
  prefix suffix per-line-prefix fill-column
Insert @var{words} at @var{cursor} with added line breaks according to
@var{fill-column}.

@var{words} is a sequence of strings.

Each of @var{prefix}, @var{suffix} and @var{per-line-prefix} is a string
if supplied.

@var{fill-column}, if supplied, is positive integer.  If not supplied,
@var{fill-column} defaults to the value of
@t{text.editing:*fill-column*} which in turn is bound to @t{80} by
default.

Roughly proceed as follows:
@enumerate

@item
If it has been supplied, insert the @var{prefix} string.

@item
For each string in @var{words}

@itemize

@item
If inserting the string at the current location would exceed
@var{fill-column}, insert a line break and, if it has been supplied,
insert the @var{per-line-prefix} string.

@item
Unless the string is just punctuation, insert a space.

@item
Insert the string.

@end itemize

@item
If it has been supplied, insert the @var{suffix} string.

@end enumerate
@end deffn

@defgena{fill-words,text.editing} start-cursor end-cursor words @
  @pkey{} prefix suffix per-line-prefix fill-column
Replace the region between @var{start-cursor} and @var{end-cursor} by
filling with @var{words}.

@var{words} is a sequence of strings.

@var{prefix}, @var{suffix}, @var{per-line-prefix} and @var{fill-column}
behave as described for
@ref{Generic-Function text.editing|insert-words-fill,insert-words-fill}.
@end deffn

@node Commenting Operations
@subsection Commenting Operations

@defgena{comment,@toppackage{}} cursor unit direction @pkey{} comment-syntax
Comment buffer items at or around @var{cursor} according to @var{unit}
and @var{direction}.

@var{comment-syntax}, if supplied, has to be a string which specifies
the comment syntax to use.  The default is @t{;;} if @var{unit} is
@ref{unit-line,line} and @t{#|} otherwise.
@end deffn

@defgena{uncomment,@toppackage{}} cursor unit direction
Uncomment buffer items at or around @var{cursor} according to @var{unit}
and @var{direction}.
@end deffn

@node Operations on Delimiter Pairs
@subsection Operations on Delimiter Pairs

@cindex delimiter pair
@cindex structure editing
The operations described in this section together with the operations of
the @ref{Expressions,expressions} module allow structural editing of
buffer contents in the sense that they transform a given buffer text
that is syntactically valid to a new buffer text that is also
syntactically valid.  This is in contrast to general operations such as
deleting a single item: Consider deleting a single item in the buffer
text @t{(length "hi")}.  If the deleted item is the @t{(}, the @t{)} or
either of the @t{"}, the resulting buffer text is no longer a
syntactically valid s-expression.  In this example, deletion operations
that preserve the validity can, for example, delete both characters of
the @t{()} and @t{""} pairs simultaneously once the items in between
have been deleted or delete the respective delimiter pair in a single
operation, thus ``raising'' the formerly surrounded items up one level
of expression nesting:

@lisp
(length "hi") @result{} (length "") @result{} (length ) @result{} () @result{}
(length "hi") @result{} length "hi"
@end lisp

The above examples illustrate two kinds of operations:

@itemize

@item
The first kind are operations which are intended as structure-preserving
variants of ``ordinary'' operations, mainly of insertion and deletion
operations since those affect the structural validity when applied to
delimiter characters.  These operations are described in the following
section.

@item
The second kind, of which the ``raising'' operation is one example,
consider the buffer text as an expression tree and perform modifications
on that tree.  Those operations are described as a part of the
@ref{Expressions,expressions} module (@pxref{Expression Operations}).

@end itemize

@defclassa{no-closing-delimiter-error,@toppackage{}}
This error is signaled when an operation that requires a closing
delimiter item is performed on a cursor that is not located at or near
such an item.
@end deftp

@defgena{insert-delimiter-pair,@toppackage{}} cursor opening @pkey{}@
  closing

Insert the delimiter character @var{opening} before @var{cursor} and
insert the delimiter character @var{closing} after @var{cursor}.

If @var{closing} is not supplied, the closing delimiter character is
determined by looking up the pair that has @var{opening} as the opening
delimiter character in the set of known delimiter pairs.

The return value of this function is unspecified.

This function is intended to be used as a structure-preserving
replacement for ``ordinary'' operations that insert an opening
delimiter: When a user performs the operation for inserting the opening
delimiter, operations for inserting some content and the operation for
inserting the closing delimiter, the first operation has to insert both
delimiters to avoid unbalanced delimiters:
@example
| @result{} (|) @result{} @dots{} @result{} (foo|) @result{} (foo)|
@end example
With this editing model, it is not allowed to insert an opening
delimiter by itself.  This is also true for closing delimiters
(@pxref{Generic-Function @toppackage{}|move-past-closing-delimiter,@t{move-past-closing-delimiter}})
@end deffn

@defgena{maybe-move-past-closing-delimiter,@toppackage{}} cursor closing@
  @pkey{} whitespace

If the item after @var{cursor} is equal to the character @var{closing},
move @var{cursor} forward past the closing delimiter.

@var{whitespace} which must be either @t{nil} or @t{:move-past} or
@t{:delete} controls the behavior in case there are whitespace items
between @var{cursor} and the item that is equal to @var{closing}.  If
@var{whitespace} is @var{nil} and there are such items, @var{cursor}
does not move.  If @var{whitespace} is @var{:move-past}, @var{cursor}
moves past the whitespace items and past the closing delimiter.  If
@var{whitespace} is @t{:delete}, the whitespace items are deleted, and
@var{cursor} is moved passed the closing delimiter.

Return true if @var{cursor} has moved and false otherwise.
@end deffn

@defgena{move-past-closing-delimiter,@toppackage{}} cursor closing@
  @pkey{} whitespace

If the item after @var{cursor} is equal to the character @var{closing},
move @var{cursor} forward past the closing delimiter.

@var{whitespace} controls the behavior in case @var{cursor} is separated
from the closing delimiter by whitespace.  See
@ref{Generic-Function @toppackage{}|maybe-move-past-closing-delimiter,@t{maybe-move-past-closing-delimiter}}
for details.

The return value of this function is unspecified.

If the item after @var{cursor}, either immediately after or the first
non-whitespace item after, is not equal to @var{cursor}, signal an error
of type
@ref{Class @toppackage{}|no-closing-delimiter-error,@t{no-closing-delimiter-error}}.

This function is intended to be used as a structure-preserving
replacement for ``ordinary'' operations that insert an ``asymmetrical''
(that is, for example @t{)} but not @t{"}) closing delimiter: When a
user performs the operation for inserting the opening delimiter,
operations for inserting some content and the operation for inserting
the closing delimiter, the first operation has to insert both delimiters
and the final operation simply has to move past the closing delimiter:
@example
| @result{} (|) @result{} @dots{} @result{} (foo|) @result{} (foo)|
@end example
With this editing model, it is never necessary and in fact never allowed
to insert a closing delimiter by itself which is why this function
signals an error if there is no closing delimiter to move past.  This is
also true for opening delimiters
(@pxref{Generic-Function @toppackage{}|insert-delimiter-pair,@t{insert-delimiter-pair}}).
@end deffn

@defgena{move-past-closing-delimiter-or-insert-delimiter-pair,@toppackage{}}@
  cursor delimiter @pkey{} whitespace

If the item after @var{cursor} is equal to the character
@var{delimiter}, move @var{cursor} forward past the (assumed to be)
closing delimiter.  If the item after @var{cursor} is not equal to the
character @var{delimiter}, insert @var{delimiter} before @var{cursor}
and insert @var{delimiter} after @var{cursor}.

@var{whitespace} controls the behavior in case @var{cursor} is separated
from the closing delimiter by whitespace.  See
@ref{Generic-Function @toppackage{}|maybe-move-past-closing-delimiter,@t{maybe-move-past-closing-delimiter}}
for details.

Return true if a pair of delimiters has been inserted and false
otherwise.

This function is intended to be used as a structure-preserving
replacement for ``ordinary'' operations that insert a ``symmetrical''
(that is, for example @t{"} but not @t{)}) delimiter: When a user
performs the operation for inserting @var{delimiter}, operations for
inserting some content and the operation for inserting @var{delimiter}
again, the first operation has to insert @var{delimiter} twice and the
final operation simply has move past the second delimiter:
@example
| @result{} "|" @result{} @dots{} @result{} "foo|" @result{} "foo"|
@end example
With this editing model, it is never necessary and in fact never allowed
to insert a single delimiter by itself which is why this function
inserts a delimiter pair if there is no closing delimiter to move past.

Examples:
@example
  @t{(move-past-closing-delimiter-or-insert-delimiter-pair cursor #\")} in
  "foo|"
@result{} "foo"|

  @t{(move-past-closing-delimiter-or-insert-delimiter-pair cursor #\")} in
  (length |)
@result{} (length "|")
@end example
@end deffn

@defgena{delete-delimiter-pair-or-item,@toppackage{}} cursor@
  direction @pkey{} if-not-empty

If there is one, delete the pair of delimiter characters which contains
@var{cursor}.  Otherwise delete an item in @var{direction}.

In this context, a delimiter pair @emph{contains} @var{cursor}, if
either the delimiter characters surround @var{cursor} or if
@var{direction} is @t{:forward} and the opening delimiter is the item
after @var{cursor} or if @var{direction} is @t{:backward} and the
closing delimiter is the item before @var{cursor}.

@var{if-not-empty} controls the behavior in case the operation is
applied to a delimiter pair that is not empty in the sense that the
opening and the closing delimiter surround other buffer items:

@table @t

@item nil
Do nothing, do not move @var{cursor} and do not delete any items.

@item :move-past
Move @var{cursor} past the ``obstructing'' delimiter and into the
delimited content so that subsequent deletion operations will delete the
content item by item until the delimited content is empty and the
delimiter pair can be deleted.

@item :delete-inside
Do not move @var{cursor} but delete one item from the content that is
delimited by the ``obstructing'' delimiter.  This behavior can be
repeated until the delimited content is empty and the delimiter pair can
be deleted.

@item @var{a-function}
Call the supplied function with two arguments, @var{cursor} and an
description of the ``obstacle'' which is either @t{:outside} or
@t{:inside}.  The function can delete items near @var{cursor} or move
@var{cursor} as appropriate.

@end table

The return value of this function is unspecified.

This function is intended to be used as a structure-preserving
replacement for ``ordinary'' operations that delete a single item: If
the to-be-deleted item is a closing delimiter or an opening delimiter,
the ``opposite'' delimiter has to be deleted in the same operation to
maintain delimiter balance.  If the to-be-deleted item is not a
delimiter, the task can be delegated to the ``ordinary'' deletion
operation.

Examples:
@example
@t{(delete-delimiter-pair-or-item cursor :forward)} in
  |()
@result{} |

@t{(delete-delimiter-pair-or-item cursor :forward)} in
  (|)
@result{} |

@t{(delete-delimiter-pair-or-item cursor :forward :if-not-empty @var{if-not-empty})} in
  (foo|)
@result{} (foo|)  when @var{if-not-empty} is @t{nil}
@result{} (foo)|  when @var{if-not-empty} is @t{:move-past}
@result{} (fo|)   when @var{if-not-empty} is @t{:delete-inside}

@t{(delete-delimiter-pair-or-item cursor :forward :if-not-empty @var{if-not-empty})} in
  |(foo)
@result{} |(foo)  when @var{if-not-empty} is @t{nil}
@result{} (|foo)  when @var{if-not-empty} is @t{:move-past}
@result{} |(oo)   when @var{if-not-empty} is @t{:delete-inside}
@end example
@end deffn

@defgena{surround-with-delimiter-pair,@toppackage{}} cursor unit direction@
  opening @pkey{} closing count

Surround the item sequence between @var{cursor} and the location that
would result from moving @var{cursor} @var{count} times by @var{unit} in
@var{direction} with the delimiters @var{opening} and @var{closing}.

If supplied, @var{closing} is a character that should be used as the
closing delimiter of the pair.  If @var{closing} is not supplied, the
result of evaluating @t{(closing-delimiter @var{opening})} is used.

If supplied, @var{count} controls how many units as indicated by
@var{unit} should be surrounded by the inserted delimiters.  If
@var{count} is not supplied, a single unit is used.

The return value of this function is unspecified.

Examples:
@example
@t{(surround-with-delimiter-pair cursor @ref{unit-word,word} :forward #\")} in
  |foo bar
@result{} "|foo" bar

@t{(surround-with-delimiter-pair cursor @ref{unit-word,word} :forward #\" :count 2)} in
  |foo bar
@result{} "|foo bar"

@t{(surround-with-delimiter-pair cursor @ref{unit-word,word} :backward #\( :count 2)} in
  foo bar| baz
@result{} (foo bar|) baz
@end example
@end deffn
